from common import Function, Xs, Ys
from methods import euler


def milne(f: Function, x0: float, y0: float, xn: float, h: float) -> tuple[Xs, Ys]:
    """Метод Милна."""
    # Вычисляем количество шагов n на основе начальной точки x0, конечной точки xn и размера шага h.
    n = int((xn - x0) / h)

    # Если количество шагов n слишком мало для применения формулы Милна (требуется минимум 4 начальные точки),
    # метод может вернуть результаты, полностью основанные на методе Эйлера,
    # так как цикл Милна не будет выполнен. Минимальное n для выполнения цикла - 4.
    if n < 4:
        # Можно добавить предупреждение или просто вернуть результаты Эйлера,
        # так как цикл for i in range(4, n + 1) не будет выполнен.
        # print(f"Предупреждение: n={n} слишком мало для метода Милна. Используются только значения Эйлера.")
        pass # Продолжаем, Эйлер вычислит значения.

    # Инициализируем массивы xs (значения x) и ys (значения y),
    # используя метод Эйлера для получения начальных значений.
    # Метод Эйлера вызывается для всего диапазона. Милн будет перезаписывать значения ys, начиная с индекса 4.
    xs, ys = euler(f, x0, y0, xn, h)

    # Цикл должен начинаться с i = 4, так как для формулы предиктора Милна
    # ys[i] = ys[i-4] + ... требуется значение ys[i-4].
    for i in range(4, n + 1):
        # Шаг предиктора:
        # Вычисляем предварительное значение y[i] (прогноз).
        # ys[i_predicted] = ys[i-4] + (4h/3) * (2*f(xs[i-3],ys[i-3]) - f(xs[i-2],ys[i-2]) + 2*f(xs[i-1],ys[i-1]))
        y_predicted = ys[i - 4] + (4 * h / 3) * (2 * f(xs[i - 3], ys[i - 3]) - f(xs[i - 2], ys[i - 2]) + 2 * f(xs[i - 1], ys[i - 1]))
        
        # Шаг корректора:
        # Уточняем значение y[i] (коррекция), используя предсказанное значение y_predicted.
        # ys[i_corrected] = ys[i-2] + (h/3) * (f(xs[i-2],ys[i-2]) + 4*f(xs[i-1],ys[i-1]) + f(xs[i], y_predicted))
        ys[i] = ys[i - 2] + (h / 3) * (f(xs[i - 2], ys[i - 2]) + 4 * f(xs[i - 1], ys[i - 1]) + f(xs[i], y_predicted))

    # Возвращаем массивы значений x и вычисленных значений y.
    return xs, ys
